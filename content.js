// –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –∫ –∑–∞–¥–∞—á–∞–º Jira

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
let syncService = null;

class JiraNotesExtension {
  constructor() {
    this.currentIssueKey = null;
    this.notesContainer = null;
    this.initialized = false;
    this.isUpdating = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    this.syncMode = 'personal'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ª–∏—á–Ω—ã–π —Ä–µ–∂–∏–º
    this.syncInitialized = false;
    
    // –ö–µ—à –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    this.statusCache = {}; // { issueKey: status }
    this.addressCache = {}; // { issueKey: address }
    this.processedCards = new Set(); // –ö–∞—Ä—Ç–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
    this.lastUpdateTime = 0; // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
  init() {
    if (this.initialized) return;
    
    console.log('Jira Personal Notes: Initializing...');
    this.initialized = true;
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => this.start());
    } else {
      this.start();
    }
  }

  // –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏
  async start() {
    await this.initSync(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    this.detectIssueKey();
    this.injectNotesPanel();
    this.setupObserver();
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  async initSync() {
    try {
      const settings = await chrome.storage.local.get(['syncMode', 'teamId', 'userEmail', 'userName', 'userColor']);
      this.syncMode = settings.syncMode || 'personal';

      console.log(`üîÑ Sync mode: ${this.syncMode}`);

      if (this.syncMode === 'team' && settings.teamId && settings.userEmail) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        if (!syncService) {
          const module = await import(chrome.runtime.getURL('sync-service.js'));
          syncService = module.syncService;
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        const success = await syncService.init(
          settings.teamId,
          settings.userEmail,
          settings.userName,
          settings.userColor
        );

        if (success) {
          this.syncInitialized = true;
          console.log('‚úÖ Sync service initialized');

          // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
          syncService.subscribeToChanges((notes) => {
            this.handleSyncUpdate(notes);
          });

          // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–∞–Ω–¥–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
          await syncService.loadAllTeamNotes();
        } else {
          console.warn('‚ö†Ô∏è Sync initialization failed, using local mode');
        }
      } else {
        console.log('üë§ Using personal mode (local storage only)');
      }
    } catch (error) {
      console.error('‚ùå Sync initialization error:', error);
      this.syncMode = 'personal';
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  handleSyncUpdate(notes) {
    console.log('üîÑ Sync update received:', Object.keys(notes).length, 'notes');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ –¥–æ—Å–∫–µ
    this.updateAllCards();

    // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞ –∑–∞–º–µ—Ç–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏ - –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë
    if (this.currentIssueKey && notes[this.currentIssueKey]) {
      const note = notes[this.currentIssueKey];
      this.updateCurrentNotePanel(note);
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–∞–Ω–µ–ª–∏ –∑–∞–º–µ—Ç–æ–∫ (–ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
  updateCurrentNotePanel(note) {
    const textarea = document.querySelector('.jira-notes-textarea');
    if (textarea && textarea.value !== note.text) {
      textarea.value = note.text || '';
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    document.querySelectorAll('.status-button').forEach(btn => {
      btn.classList.toggle('active', btn.dataset.status === note.status);
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
    this.showLastModifiedInfo(note);
  }

  // –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
  showLastModifiedInfo(note) {
    if (!note.lastModifiedBy || note.lastModifiedBy === this.userId) return;

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    const oldIndicator = document.querySelector('.sync-editor-info');
    if (oldIndicator) oldIndicator.remove();

    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
    const indicator = document.createElement('div');
    indicator.className = 'sync-editor-info';
    indicator.style.cssText = `
      display: flex;
      align-items: center;
      gap: 8px;
      padding: 8px 12px;
      background: #f5f5f5;
      border-radius: 6px;
      font-size: 12px;
      color: #666;
      margin-top: 8px;
    `;

    const colorDot = document.createElement('div');
    colorDot.style.cssText = `
      width: 12px;
      height: 12px;
      border-radius: 50%;
      background: ${note.lastModifiedByColor || '#666'};
    `;

    const timeStr = note.lastModified ? new Date(note.lastModified).toLocaleString('ru-RU') : '';
    indicator.innerHTML = `
      ${colorDot.outerHTML}
      <span>–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ: <strong>${note.lastModifiedByName || 'Unknown'}</strong> ${timeStr}</span>
    `;

    const panel = document.querySelector('.jira-notes-panel');
    if (panel) {
      panel.appendChild(indicator);
    }
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏
  detectIssueKey() {
    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ selectedIssue
    const urlParams = new URLSearchParams(window.location.search);
    const selectedIssue = urlParams.get('selectedIssue');
    if (selectedIssue && selectedIssue.match(/^[A-Z]+-\d+$/)) {
      this.currentIssueKey = selectedIssue;
      console.log('Detected issue key from URL param:', this.currentIssueKey);
      return;
    }

    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ URL path –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    const urlMatch = window.location.href.match(/\/browse\/([A-Z]+-\d+)/);
    if (urlMatch) {
      this.currentIssueKey = urlMatch[1];
      console.log('Detected issue key from URL path:', this.currentIssueKey);
      return;
    }

    // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ DOM
    const issueKeyElement = document.querySelector('[data-testid="issue.views.issue-base.foundation.breadcrumbs.current-issue.item"]') ||
                           document.querySelector('[data-issue-key]') ||
                           document.querySelector('#key-val') ||
                           document.querySelector('[data-testid="issue.views.issue-base.foundation.summary.heading"]');
    
    if (issueKeyElement) {
      const key = issueKeyElement.getAttribute('data-issue-key') || 
                  issueKeyElement.textContent.trim().match(/[A-Z]+-\d+/)?.[0];
      if (key) {
        this.currentIssueKey = key;
        console.log('Detected issue key from DOM:', this.currentIssueKey);
      }
    }
  }

  // –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ Jira
  waitForJiraModal() {
    return new Promise((resolve) => {
      const checkModal = () => {
        // –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ç–æ–≥–æ, —á—Ç–æ –±–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
        const modal = document.querySelector('[role="dialog"]') || 
                     document.querySelector('[data-testid*="issue"]') ||
                     document.querySelector('.issue-view');
        
        if (modal) {
          console.log('‚úÖ Jira modal detected, waiting 500ms more...');
          setTimeout(resolve, 500); // –î–∞–µ–º –µ—â–µ –ø–æ–ª—Å–µ–∫—É–Ω–¥—ã –Ω–∞ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—é
        } else {
          console.log('‚è≥ Waiting for Jira modal...');
          setTimeout(checkModal, 200); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 200–º—Å
        }
      };
      checkModal();
    });
  }

  // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å —Å –∑–∞–º–µ—Ç–∫–∞–º–∏
  async injectNotesPanel() {
    if (!this.currentIssueKey) {
      console.log('‚ùå No issue key detected, retrying...');
      setTimeout(() => this.injectNotesPanel(), 1000);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–∞–Ω–µ–ª—å
    const existingPanel = document.querySelector('[data-jira-notes-panel="true"]');
    if (existingPanel) {
      console.log('‚ôªÔ∏è Panel already exists, updating...');
      const title = existingPanel.querySelector('.jira-notes-title');
      if (title) {
        title.textContent = this.currentIssueKey;
      }
      existingPanel.style.display = 'block';
      await this.loadNotes();
      return;
    }

    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–∫–æ–≤–æ–≥–æ –æ–∫–Ω–∞ Jira
    console.log('‚è≥ Waiting for Jira modal to fully load...');
    await this.waitForJiraModal();
    
    console.log('üé® Creating panel for', this.currentIssueKey);
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å
    const panel = this.createNotesPanel();
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –≤ body
    document.body.appendChild(panel);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞–Ω–µ–ª—å –≤–∏–¥–∏–º–∞
    const rect = panel.getBoundingClientRect();
    console.log(' Panel position:', {
      top: rect.top,
      left: rect.left,
      display: window.getComputedStyle(panel).display,
      visibility: window.getComputedStyle(panel).visibility,
      zIndex: window.getComputedStyle(panel).zIndex
    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
    await this.loadNotes();
  }

  // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –ø–∞–Ω–µ–ª–∏
  findTargetContainer() {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º body –¥–ª—è –ø–ª–∞–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞
    return document.body;
  }

  // –°–æ–∑–¥–∞–µ–º HTML –ø–∞–Ω–µ–ª–∏ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏
  createNotesPanel() {
    const panel = document.createElement('div');
    panel.className = 'jira-notes-panel jira-notes-floating';
    panel.setAttribute('data-jira-notes-panel', 'true');
    panel.style.cssText = `
      display: block !important;
      visibility: visible !important;
      opacity: 1 !important;
      position: fixed !important;
      z-index: 999999 !important;
      pointer-events: auto !important;
    `;
    
    panel.innerHTML = `
      <div class="jira-notes-header" id="jira-notes-drag-handle">
        <div class="jira-notes-header-content">
          <span class="jira-notes-icon">ÔøΩ</span>
          <div class="jira-notes-header-text">
            <div class="jira-notes-header-title">–õ–∏—á–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏</div>
            <h3 class="jira-notes-title">${this.currentIssueKey}</h3>
          </div>
        </div>
        <button class="jira-notes-close" title="–ó–∞–∫—Ä—ã—Ç—å">√ó</button>
      </div>
      <div class="jira-notes-content">
        <div class="jira-notes-markers">
          <div class="jira-notes-markers-label">üéØ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏:</div>
          <div class="jira-notes-markers-container">
            <button class="jira-status-btn" data-status="red" title="–ü—Ä–æ–±–ª–µ–º–∞ / –°—Ä–æ—á–Ω–æ">
              <span class="status-dot status-red"></span>
              üî¥ –ü—Ä–æ–±–ª–µ–º–∞
            </button>
            <button class="jira-status-btn" data-status="yellow" title="–í –ø—Ä–æ—Ü–µ—Å—Å–µ / –û–∂–∏–¥–∞–Ω–∏–µ">
              <span class="status-dot status-yellow"></span>
              üü° –í –ø—Ä–æ—Ü–µ—Å—Å–µ
            </button>
            <button class="jira-status-btn" data-status="green" title="–ì–æ—Ç–æ–≤–æ / –û–ö">
              <span class="status-dot status-green"></span>
              üü¢ –ì–æ—Ç–æ–≤–æ
            </button>
            <button class="jira-status-btn clear-status" data-status="" title="–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç—É—Å">
              <span class="status-dot status-gray"></span>
              –û—á–∏—Å—Ç–∏—Ç—å
            </button>
          </div>
        </div>
        <div class="jira-notes-textarea-wrapper">
          <label class="jira-notes-textarea-label">üí¨ –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:</label>
          <textarea 
            class="jira-notes-textarea" 
            placeholder="–î–æ–±–∞–≤—å—Ç–µ –ª–∏—á–Ω—É—é –∑–∞–º–µ—Ç–∫—É –∫ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ..."
            rows="4"
          ></textarea>
        </div>
        <div class="jira-notes-footer">
          <span class="jira-notes-info">üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ</span>
        </div>
      </div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    this.attachEventListeners(panel);
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
    this.restorePosition(panel);
    
    // –î–µ–ª–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã–º
    this.makeDraggable(panel);
    
    // –ó–∞—â–∏—Ç–∞ –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è
    this.protectPanel(panel);

    console.log('‚úÖ Panel created successfully');
    return panel;
  }

  // –ó–∞—â–∏—Ç–∞ –ø–∞–Ω–µ–ª–∏ –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è
  protectPanel(panel) {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π z-index
    panel.style.zIndex = '999999';
    
    let removalCount = 0;
    let hideCount = 0;
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–Ω–µ–ª—å –Ω–∞ –º–µ—Å—Ç–µ
    const protectionInterval = setInterval(() => {
      if (!document.body.contains(panel)) {
        removalCount++;
        console.log(`‚ö†Ô∏è [${removalCount}] Panel was REMOVED from DOM, re-adding...`);
        document.body.appendChild(panel);
        panel.style.zIndex = '999999';
        panel.style.display = 'block';
      }
      
      // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–∞–Ω–µ–ª—å –≤–∏–¥–∏–º–∞ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–¥–∞—á–∞
      if (this.currentIssueKey) {
        const computedStyle = window.getComputedStyle(panel);
        if (computedStyle.display === 'none' || computedStyle.visibility === 'hidden' || computedStyle.opacity === '0') {
          hideCount++;
          console.log(`‚ö†Ô∏è [${hideCount}] Panel is HIDDEN (display: ${computedStyle.display}, visibility: ${computedStyle.visibility}, opacity: ${computedStyle.opacity})`);
          panel.style.display = 'block';
          panel.style.visibility = 'visible';
          panel.style.opacity = '1';
        }
      }
    }, 500); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 500–º—Å
    
    // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –ø–∞–Ω–µ–ª–∏
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'attributes' && mutation.attributeName === 'style') {
          const currentDisplay = panel.style.display;
          if (currentDisplay === 'none' || currentDisplay === '') {
            console.log('üî¥ MutationObserver caught style change to hide panel!');
            panel.style.display = 'block';
            panel.style.visibility = 'visible';
            panel.style.opacity = '1';
          }
        }
      });
    });
    
    observer.observe(panel, {
      attributes: true,
      attributeFilter: ['style', 'class']
    });
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ - –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –∏–∑–º–µ–Ω–∏—Ç—å display
    const originalSetAttribute = panel.setAttribute.bind(panel);
    panel.setAttribute = function(name, value) {
      if (name === 'style' && (value.includes('display: none') || value.includes('display:none'))) {
        console.log('üî¥ Blocked setAttribute attempt to hide panel');
        return;
      }
      return originalSetAttribute(name, value);
    };
  }

  // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  attachEventListeners(panel) {
    const textarea = panel.querySelector('.jira-notes-textarea');
    const closeButton = panel.querySelector('.jira-notes-close');
    const statusButtons = panel.querySelectorAll('.jira-status-btn');

    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –≤–≤–æ–¥–µ (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π)
    let saveTimeout;
    textarea.addEventListener('input', () => {
      clearTimeout(saveTimeout);
      saveTimeout = setTimeout(() => this.saveNotes(), 1000);
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ (–Ω–µ —É–¥–∞–ª—è–µ–º, –ø—Ä–æ—Å—Ç–æ —Å–∫—Ä—ã–≤–∞–µ–º)
    closeButton.addEventListener('click', (e) => {
      e.stopPropagation();
      panel.style.display = 'none';
      console.log('Panel hidden by user');
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
    statusButtons.forEach(button => {
      button.addEventListener('click', () => {
        const status = button.getAttribute('data-status');
        this.setStatus(status);
        
        // –¢–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∞–¥—Ä–µ—Å –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç–∞—Ç—É—Å–∞
        this.extractAndSaveAddress();
      });
    });

    // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
    textarea.addEventListener('keydown', (e) => {
      if (e.ctrlKey && e.key === 's') {
        e.preventDefault();
        this.saveNotes(true);
      }
    });

    console.log('Event listeners attached to panel');
  }

  // –î–µ–ª–∞–µ–º –æ–∫–Ω–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã–º
  makeDraggable(panel) {
    const handle = panel.querySelector('#jira-notes-drag-handle');
    let isDragging = false;
    let currentX;
    let currentY;
    let initialX;
    let initialY;

    handle.style.cursor = 'move';
    
    // –ó–∞—â–∏—Ç–∞ –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏
    panel.setAttribute('data-jira-notes-panel', 'true');

    handle.addEventListener('mousedown', (e) => {
      if (e.target.classList.contains('jira-notes-close')) return;
      
      isDragging = true;
      const rect = panel.getBoundingClientRect();
      initialX = e.clientX - rect.left;
      initialY = e.clientY - rect.top;
      
      panel.style.transition = 'none';
    });

    document.addEventListener('mousemove', (e) => {
      if (!isDragging) return;

      e.preventDefault();
      currentX = e.clientX - initialX;
      currentY = e.clientY - initialY;

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —ç–∫—Ä–∞–Ω–∞
      const maxX = window.innerWidth - panel.offsetWidth;
      const maxY = window.innerHeight - panel.offsetHeight;
      
      currentX = Math.max(0, Math.min(currentX, maxX));
      currentY = Math.max(0, Math.min(currentY, maxY));

      panel.style.left = currentX + 'px';
      panel.style.top = currentY + 'px';
      panel.style.right = 'auto';
      panel.style.bottom = 'auto';
    });

    document.addEventListener('mouseup', () => {
      if (isDragging) {
        isDragging = false;
        panel.style.transition = '';
        this.savePosition(panel);
      }
    });
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –æ–∫–Ω–∞
  async savePosition(panel) {
    const position = {
      left: panel.style.left,
      top: panel.style.top
    };

    try {
      await chrome.storage.local.set({
        'panel_position': position
      });
    } catch (error) {
      console.error('Error saving position:', error);
    }
  }

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –æ–∫–Ω–∞
  async restorePosition(panel) {
    try {
      const result = await chrome.storage.local.get(['panel_position']);
      const position = result.panel_position;

      if (position && position.left && position.top) {
        // –ü–∞—Ä—Å–∏–º –∑–Ω–∞—á–µ–Ω–∏—è (–º–æ–≥—É—Ç –±—ã—Ç—å –∫–∞–∫ —á–∏—Å–ª–∞, —Ç–∞–∫ –∏ —Å—Ç—Ä–æ–∫–∏ —Å 'px')
        const savedLeft = parseInt(position.left);
        const savedTop = parseInt(position.top);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —ç–∫—Ä–∞–Ω–∞
        const maxLeft = window.innerWidth - 300; // 280px —à–∏—Ä–∏–Ω–∞ –ø–∞–Ω–µ–ª–∏ + –∑–∞–ø–∞—Å
        const maxTop = window.innerHeight - 200; // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –ø–∞–Ω–µ–ª–∏
        
        const safeLeft = Math.max(20, Math.min(savedLeft, maxLeft));
        const safeTop = Math.max(20, Math.min(savedTop, maxTop));
        
        console.log(` Restoring position: saved(${savedLeft}, ${savedTop}) -> safe(${safeLeft}, ${safeTop}), screen(${window.innerWidth}x${window.innerHeight})`);
        
        panel.style.left = safeLeft + 'px';
        panel.style.top = safeTop + 'px';
        panel.style.right = 'auto';
      } else {
        // –ü–æ–∑–∏—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
        const defaultLeft = window.innerWidth - 300;
        panel.style.left = defaultLeft + 'px';
        panel.style.top = '20px';
        panel.style.right = 'auto';
        console.log(` Using default position: (${defaultLeft}, 20), screen(${window.innerWidth}x${window.innerHeight})`);
      }
    } catch (error) {
      console.error('Error restoring position:', error);
      // Fallback –Ω–∞ –ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
      panel.style.left = (window.innerWidth - 300) + 'px';
      panel.style.top = '20px';
      panel.style.right = 'auto';
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏
  async loadNotes() {
    try {
      const noteKey = `note_${this.currentIssueKey}`;
      const statusKey = `status_${this.currentIssueKey}`;
      const result = await chrome.storage.local.get([noteKey, statusKey]);
      
      const notes = result[noteKey] || '';
      const status = result[statusKey] || '';
      
      const textarea = document.querySelector('.jira-notes-textarea');
      if (textarea) {
        textarea.value = notes;
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å
      if (status) {
        this.displayCurrentStatus(status);
      }
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∑–∞–¥–∞—á–∏
      await this.extractAndSaveAddress();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ –¥–æ—Å–∫–µ
      setTimeout(() => {
        this.updateAllCards();
      }, 500);
    } catch (error) {
      console.error('Error loading notes:', error);
    }
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –∏–∑ –æ—Ç–∫—Ä—ã—Ç–æ–π –∑–∞–¥–∞—á–∏
  async extractAndSaveAddress() {
    console.log('üîç Starting address extraction...');
    
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –∞–¥—Ä–µ—Å–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
    let attempts = 0;
    const maxAttempts = 10;
    
    while (attempts < maxAttempts) {
      attempts++;
      
      // –ò—â–µ–º –ø–æ–ª–µ "–û—Ñ–∏—Å –∏–ª–∏ –ê–¥—Ä–µ—Å" –≤ –æ—Ç–∫—Ä—ã—Ç–æ–π –∑–∞–¥–∞—á–µ
      const addressField = document.querySelector('[data-testid="issue.views.field.single-line-text.read-view.customfield_11120"]');
      
      if (addressField) {
        const address = addressField.textContent.trim();
        
        if (address) {
          console.log(`‚úÖ Found address on attempt ${attempts}: "${address}"`);

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
          if (this.currentIssueKey) {
            await chrome.storage.local.set({
              [`address_${this.currentIssueKey}`]: address
            });
            console.log(`üíæ Address saved: ${this.currentIssueKey} -> ${address}`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
            setTimeout(() => this.updateAllCards(), 500);
          }
          return; // –£—Å–ø–µ—à–Ω–æ –Ω–∞—à–ª–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏
        } else {
          console.log(`‚ö†Ô∏è Attempt ${attempts}: Field found but empty`);
        }
      } else {
        console.log(`‚ö†Ô∏è Attempt ${attempts}: Address field not found yet`);
      }
      
      // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
      await new Promise(resolve => setTimeout(resolve, 500));
    }
    
    console.log('‚ùå Address field not found after all attempts');
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫
  async saveNotes(showNotification = false) {
    const textarea = document.querySelector('.jira-notes-textarea');
    if (!textarea) return;

    const notes = textarea.value;
    const noteKey = `note_${this.currentIssueKey}`;

    try {
      // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ sync service
      if (this.syncMode === 'team' && syncService && this.syncInitialized) {
        const currentStatus = await chrome.storage.local.get(`status_${this.currentIssueKey}`);
        const currentAddress = await chrome.storage.local.get(`address_${this.currentIssueKey}`);
        
        await syncService.saveNote(this.currentIssueKey, {
          text: notes,
          status: currentStatus[`status_${this.currentIssueKey}`] || null,
          address: currentAddress[`address_${this.currentIssueKey}`] || null
        });
        
        console.log('üíæ Notes synced for', this.currentIssueKey);
      } else {
        // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        await chrome.storage.local.set({
          [noteKey]: notes
        });
        console.log('üìù Notes saved locally for', this.currentIssueKey);
      }
    } catch (error) {
      console.error('Error saving notes:', error);
    }
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
  async setStatus(status) {
    const statusKey = `status_${this.currentIssueKey}`;

    try {
      if (status) {
        // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ sync service
        if (this.syncMode === 'team' && syncService && this.syncInitialized) {
          const currentNote = await chrome.storage.local.get(`note_${this.currentIssueKey}`);
          const currentAddress = await chrome.storage.local.get(`address_${this.currentIssueKey}`);
          
          await syncService.saveNote(this.currentIssueKey, {
            text: currentNote[`note_${this.currentIssueKey}`] || '',
            status: status,
            address: currentAddress[`address_${this.currentIssueKey}`] || null
          });
          
          console.log(`‚úÖ Status "${status}" synced for ${this.currentIssueKey}`);
        } else {
          // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
          await chrome.storage.local.set({
            [statusKey]: status
          });
          console.log(`‚úÖ Status "${status}" saved locally for ${this.currentIssueKey}`);
        }
      } else {
        await chrome.storage.local.remove(statusKey);
        console.log(`üóëÔ∏è Status cleared for ${this.currentIssueKey}`);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞–Ω–µ–ª–∏
      this.displayCurrentStatus(status);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ –¥–æ—Å–∫–µ
      this.updateAllCards();
    } catch (error) {
      console.error('Error saving status:', error);
    }
  }

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
  displayCurrentStatus(status) {
    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
    document.querySelectorAll('.jira-status-btn').forEach(btn => {
      if (btn.getAttribute('data-status') === status) {
        btn.classList.add('active');
      } else {
        btn.classList.remove('active');
      }
    });
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –í–°–ï –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ –¥–æ—Å–∫–µ (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø - –ë–ï–ó –ú–ï–†–¶–ê–ù–ò–Ø)
  async updateAllCards() {
    // –î–µ–±–∞—É–Ω—Å–∏–Ω–≥ - –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 2 —Å–µ–∫—É–Ω–¥—ã
    const now = Date.now();
    if (now - this.lastUpdateTime < 2000) {
      console.log('‚è≠Ô∏è Skipping update - debouncing (too soon)');
      return;
    }
    
    // –ï—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if (this.isUpdating) {
      console.log('‚è≠Ô∏è Skipping update - already in progress');
      return;
    }
    
    this.isUpdating = true;
    this.lastUpdateTime = now;
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –û–î–ò–ù –†–ê–ó
      const allData = await chrome.storage.local.get(null);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
      let cacheUpdated = false;
      const newStatusCache = {};
      const newAddressCache = {};
      
      Object.keys(allData).forEach(key => {
        if (key.startsWith('status_')) {
          const issueKey = key.replace('status_', '');
          newStatusCache[issueKey] = allData[key];
        }
        if (key.startsWith('address_')) {
          const issueKey = key.replace('address_', '');
          newAddressCache[issueKey] = allData[key];
        }
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –∫–µ—à
      if (JSON.stringify(this.statusCache) !== JSON.stringify(newStatusCache) ||
          JSON.stringify(this.addressCache) !== JSON.stringify(newAddressCache)) {
        this.statusCache = newStatusCache;
        this.addressCache = newAddressCache;
        cacheUpdated = true;
        
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å - —É–±–∏—Ä–∞–µ–º –í–°–ï —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        document.querySelectorAll('.jira-personal-status').forEach(el => el.remove());
        document.querySelectorAll('.jira-personal-address-inline').forEach(el => el.remove());
        document.querySelectorAll('[data-jira-processed]').forEach(card => {
          card.removeAttribute('data-jira-processed');
        });
        
        console.log(`üì¶ Cache updated: ${Object.keys(this.statusCache).length} statuses, ${Object.keys(this.addressCache).length} addresses`);
      } else {
        console.log('‚úÖ Cache unchanged, only processing new cards');
      }

      // –ò—â–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
      const allCards = document.querySelectorAll('[data-testid*="platform-card"], [data-testid*="card"], div[draggable="true"]');
      
      console.log(`üé¥ Processing ${allCards.length} cards`);
      
      let newCardsCount = 0;
      
      allCards.forEach(card => {
        // –ò—â–µ–º —Å—Å—ã–ª–∫—É —Å –Ω–æ–º–µ—Ä–æ–º –∑–∞–¥–∞—á–∏
        const link = card.querySelector('a[href*="/browse/"], a[href*="selectedIssue="]');
        if (!link) return;
        
        const href = link.href || '';
        const text = link.textContent.trim();
        const issueMatch = href.match(/([A-Z]+-\d+)/) || text.match(/^([A-Z]+-\d+)$/);
        
        if (!issueMatch) return;
        
        const issueKey = issueMatch[1];
        
        // –ü–†–û–í–ï–†–ö–ê: –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–¥—Ä–µ—Å –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ
        const hasAddress = link.querySelector('.jira-personal-address-inline');
        const isProcessed = card.hasAttribute('data-jira-processed');
        
        // –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –£–ñ–ï –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ò –∞–¥—Ä–µ—Å –µ—Å—Ç—å - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if (isProcessed && hasAddress) {
          return; // –£–∂–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!
        }
        
        // –ï—Å–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ - –¥–æ–∫—Ä—É—á–∏–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–µ
        if (!isProcessed) {
          newCardsCount++;
          card.setAttribute('data-jira-processed', 'true');
          card.style.position = 'relative';
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        const hasStatus = card.querySelector('.jira-personal-status');
        // –°—Ç–∞—Ç—É—Å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–∞–º–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ
        if (this.statusCache[issueKey] && !hasStatus) {
          const statusDot = document.createElement('div');
          statusDot.className = `jira-personal-status status-${this.statusCache[issueKey]}`;
          statusDot.title = `–°—Ç–∞—Ç—É—Å: ${this.statusCache[issueKey] === 'red' ? '–ü—Ä–æ–±–ª–µ–º–∞' : this.statusCache[issueKey] === 'yellow' ? '–í –ø—Ä–æ—Ü–µ—Å—Å–µ' : '–ì–æ—Ç–æ–≤–æ'}`;
          statusDot.setAttribute('data-issue-key', issueKey);
          card.appendChild(statusDot);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (this.addressCache[issueKey] && !hasAddress) {
          // –°–∫—Ä—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏
          const childDivs = link.querySelectorAll('div');
          childDivs.forEach(div => {
            if (div.textContent.includes(issueKey) && !div.classList.contains('jira-personal-address-inline')) {
              div.style.display = 'none';
            }
          });
          
          // –°–æ–∑–¥–∞–µ–º –∞–¥—Ä–µ—Å
          const addressSpan = document.createElement('div');
          addressSpan.className = 'jira-personal-address-inline';
          addressSpan.textContent = ` ${this.addressCache[issueKey]}`;
          addressSpan.title = `–ê–¥—Ä–µ—Å: ${this.addressCache[issueKey]} (${issueKey})`;
          addressSpan.style.cssText = `
            display: inline-block !important;
            background: linear-gradient(135deg, #0052CC 0%, #0747A6 100%) !important;
            color: white !important;
            padding: 4px 10px !important;
            border-radius: 6px !important;
            font-size: 13px !important;
            font-weight: 700 !important;
            white-space: nowrap !important;
            box-shadow: 0 2px 8px rgba(0, 82, 204, 0.3) !important;
            letter-spacing: 0.3px !important;
            max-width: 200px !important;
            overflow: hidden !important;
            text-overflow: ellipsis !important;
          `;
          
          link.appendChild(addressSpan);
        }
      });
      
      if (newCardsCount > 0) {
        console.log(`‚úÖ Processed ${newCardsCount} NEW cards (${allCards.length - newCardsCount} already done)`);
      } else {
        console.log(`‚úÖ All ${allCards.length} cards already processed`);
      }
    } catch (error) {
      console.error('‚ùå Error updating cards:', error);
    } finally {
      this.isUpdating = false;
    }
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏
  showStatus(message, type = 'info') {
    console.log('Status:', message, type);
  }

  // –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ DOM (–¥–ª—è SPA)
  setupObserver() {
    let lastIssueKey = this.currentIssueKey;

    const observer = new MutationObserver((mutations) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ URL –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
      const newIssueKey = this.extractIssueKeyFromUrl();
      
      if (newIssueKey && newIssueKey !== lastIssueKey) {
        console.log('Issue changed:', lastIssueKey, '->', newIssueKey);
        lastIssueKey = newIssueKey;
        this.currentIssueKey = newIssueKey;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–Ω–µ–ª—å
        const panel = document.querySelector('.jira-notes-panel');
        if (panel) {
          const title = panel.querySelector('.jira-notes-title');
          if (title) {
            title.textContent = newIssueKey;
          }
          panel.style.display = 'block';
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        setTimeout(() => this.loadNotes(), 300);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–∏–ª–∏—Å—å –ª–∏ –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ –¥–æ—Å–∫—É
      const hasNewCards = Array.from(mutations).some(mutation => {
        return Array.from(mutation.addedNodes).some(node => {
          if (node.nodeType === 1) {
            return node.matches && (
              node.matches('[data-testid*="card"]') ||
              node.matches('a[href*="browse"]') ||
              node.querySelector('a[href*="browse"]')
            );
          }
          return false;
        });
      });

      if (hasNewCards) {
        console.log('üîÑ New cards detected, updating...');
        setTimeout(() => this.updateAllCards(), 300);
      }
    });

    observer.observe(document.body, {
      childList: true,
      subtree: true
    });

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–ª–µ–¥–∏–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ URL
    this.watchUrlChanges();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¢–û–õ–¨–ö–û –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —á–µ—Ä–µ–∑ MutationObserver
    // –£–±—Ä–∞–ª–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π setInterval –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–µ—Ä—Ü–∞–Ω–∏—è
  }

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è URL (–¥–ª—è selectedIssue –ø–∞—Ä–∞–º–µ—Ç—Ä–∞)
  watchUrlChanges() {
    let lastUrl = location.href;
    
    const checkUrlChange = () => {
      const currentUrl = location.href;
      if (currentUrl !== lastUrl) {
        console.log('URL changed:', lastUrl, '->', currentUrl);
        lastUrl = currentUrl;
        
        const newIssueKey = this.extractIssueKeyFromUrl();
        if (newIssueKey && newIssueKey !== this.currentIssueKey) {
          this.currentIssueKey = newIssueKey;
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–Ω–µ–ª—å
          const panel = document.querySelector('.jira-notes-panel');
          if (panel) {
            const title = panel.querySelector('.jira-notes-title');
            if (title) {
              title.textContent = newIssueKey;
            }
            panel.style.display = 'block';
          } else {
            // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            this.injectNotesPanel();
          }
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
          setTimeout(() => this.loadNotes(), 300);
        } else if (!newIssueKey) {
          // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–∫—Ä—ã—Ç–∞, —Å–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
          const panel = document.querySelector('.jira-notes-panel');
          if (panel) {
            panel.style.display = 'none';
          }
        }
      }
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 500ms
    setInterval(checkUrlChange, 500);
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á –∑–∞–¥–∞—á–∏ –∏–∑ URL
  extractIssueKeyFromUrl() {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä selectedIssue
    const urlParams = new URLSearchParams(window.location.search);
    const selectedIssue = urlParams.get('selectedIssue');
    if (selectedIssue && selectedIssue.match(/^[A-Z]+-\d+$/)) {
      return selectedIssue;
    }

    // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º path –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    const match = window.location.href.match(/\/browse\/([A-Z]+-\d+)/);
    return match ? match[1] : null;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
const extension = new JiraNotesExtension();
extension.init();
