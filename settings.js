// Settings Page Logic
let syncService = null;

let currentMode = 'personal';
let selectedColor = '#667eea';
let currentTab = 'sync';

// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const DEFAULT_STATUSES = [
  { id: 'red', name: '–ü—Ä–æ–±–ª–µ–º–∞', emoji: 'üî¥', color: '#EF4444', isDefault: true },
  { id: 'yellow', name: '–í –ø—Ä–æ—Ü–µ—Å—Å–µ', emoji: 'üü°', color: '#EAB308', isDefault: true },
  { id: 'purple', name: '–í —Ñ–æ–∫—É—Å–µ', emoji: 'üü£', color: '#A855F7', isDefault: true },
  { id: 'green', name: '–ì–æ—Ç–æ–≤–æ', emoji: 'üü¢', color: '#22C55E', isDefault: true }
];

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ sync-service
async function loadSyncService() {
  try {
    const module = await import('./sync-service.js');
    syncService = module.syncService;
    console.log('‚úÖ Sync service loaded');
  } catch (error) {
    console.warn('‚ö†Ô∏è Sync service not available:', error);
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
async function loadSettings() {
  const settings = await chrome.storage.local.get([
    'syncMode',
    'teamId',
    'userEmail',
    'userName',
    'userColor',
    'customStatuses'
  ]);

  currentMode = settings.syncMode || 'personal';
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
  document.querySelectorAll('.mode-button').forEach(btn => {
    btn.classList.toggle('active', btn.dataset.mode === currentMode);
  });

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  updateModeUI();

  // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è
  if (settings.teamId) document.getElementById('teamId').value = settings.teamId;
  if (settings.userEmail) document.getElementById('userEmail').value = settings.userEmail;
  if (settings.userName) document.getElementById('userName').value = settings.userName;
  if (settings.userColor) {
    selectedColor = settings.userColor;
    updateColorSelection();
  }

  // –ï—Å–ª–∏ –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å—Ç—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
  if (currentMode === 'team' && settings.teamId && settings.userEmail) {
    await checkConnection(settings);
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
  await loadCustomStatuses();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
function updateModeUI() {
  const syncSettings = document.getElementById('syncSettings');
  const personalButtons = document.getElementById('personalButtons');

  if (currentMode === 'team') {
    syncSettings.classList.add('visible');
    personalButtons.style.display = 'none';
  } else {
    syncSettings.classList.remove('visible');
    personalButtons.style.display = 'flex';
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
function updateColorSelection() {
  document.querySelectorAll('.color-option').forEach(option => {
    option.classList.toggle('selected', option.dataset.color === selectedColor);
  });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
async function checkConnection(settings) {
  const statusIndicator = document.getElementById('statusIndicator');
  const statusText = document.getElementById('statusText');
  const statusDot = statusIndicator.querySelector('.status-dot');

  statusIndicator.style.display = 'flex';
  statusText.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';

  try {
    if (!syncService) {
      throw new Error('Sync service not available');
    }
    
    const success = await syncService.init(
      settings.teamId,
      settings.userEmail,
      settings.userName,
      settings.userColor
    );

    if (success) {
      statusIndicator.classList.remove('offline');
      statusIndicator.classList.add('online');
      statusDot.classList.remove('offline');
      statusDot.classList.add('online');
      statusText.textContent = '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –∫–æ–º–∞–Ω–¥–µ';

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
      await loadTeamMembers();
    } else {
      throw new Error('Connection failed');
    }
  } catch (error) {
    statusIndicator.classList.remove('online');
    statusIndicator.classList.add('offline');
    statusDot.classList.remove('online');
    statusDot.classList.add('offline');
    statusText.textContent = '‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è';
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
async function loadTeamMembers() {
  const teamMembers = document.getElementById('teamMembers');
  const membersList = document.getElementById('membersList');

  try {
    if (!syncService) {
      console.warn('Sync service not available');
      return;
    }
    
    const members = await syncService.getTeamMembers();
    
    if (members.length > 0) {
      teamMembers.style.display = 'block';
      membersList.innerHTML = members.map(member => `
        <div class="member">
          <div class="member-color" style="background: ${member.color};"></div>
          <div class="member-info">
            <div class="member-name">${member.name}</div>
            <div class="member-email">${member.email}</div>
          </div>
        </div>
      `).join('');
    }
  } catch (error) {
    console.error('Error loading team members:', error);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
document.addEventListener('DOMContentLoaded', async () => {
  console.log('‚öôÔ∏è Settings page loaded');
  console.log('üìã DOM elements check:');
  console.log('  - .tab elements:', document.querySelectorAll('.tab').length);
  console.log('  - #syncTab:', !!document.getElementById('syncTab'));
  console.log('  - #statusesTab:', !!document.getElementById('statusesTab'));
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º sync service –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
  await loadSyncService();
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  await loadSettings();

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–æ–≤
  const tabs = document.querySelectorAll('.tab');
  console.log('Found tabs:', tabs.length);
  
  tabs.forEach(tab => {
    console.log('Adding click listener to tab:', tab.dataset.tab);
    tab.addEventListener('click', () => {
      const tabName = tab.dataset.tab;
      console.log('Tab clicked:', tabName);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–±
      document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
      tab.classList.add('active');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
      const syncTab = document.getElementById('syncTab');
      const statusesTab = document.getElementById('statusesTab');
      
      console.log('syncTab:', syncTab, 'statusesTab:', statusesTab);
      
      if (syncTab) syncTab.style.display = tabName === 'sync' ? 'block' : 'none';
      if (statusesTab) statusesTab.style.display = tabName === 'statuses' ? 'block' : 'none';
      
      currentTab = tabName;
    });
  });

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
  document.querySelectorAll('.mode-button').forEach(button => {
    button.addEventListener('click', () => {
      document.querySelectorAll('.mode-button').forEach(btn => {
        btn.classList.remove('active');
      });
      button.classList.add('active');
      currentMode = button.dataset.mode;
      updateModeUI();
    });
  });

  // –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞
  document.querySelectorAll('.color-option').forEach(option => {
    option.addEventListener('click', () => {
      selectedColor = option.dataset.color;
      updateColorSelection();
    });
  });

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–∞–Ω–¥–µ
  document.getElementById('connectBtn').addEventListener('click', async () => {
    const teamId = document.getElementById('teamId').value.trim();
    const userEmail = document.getElementById('userEmail').value.trim();
    const userName = document.getElementById('userName').value.trim();

    if (!teamId || !userEmail || !userName) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!');
      return;
    }

    const settings = {
      syncMode: 'team',
      teamId,
      userEmail,
      userName,
      userColor: selectedColor
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    await chrome.storage.local.set(settings);

    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
    await checkConnection(settings);

    // –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    if (syncService && confirm('–•–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à–∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –≤ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é?')) {
      await syncService.migrateLocalToTeam();
      alert('‚úÖ –ó–∞–º–µ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é!');
    }

    alert('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É Jira –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.');
  });

  // –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  document.getElementById('testBtn').addEventListener('click', async () => {
    const teamId = document.getElementById('teamId').value.trim();
    const userEmail = document.getElementById('userEmail').value.trim();
    const userName = document.getElementById('userName').value.trim();

    if (!teamId || !userEmail || !userName) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!');
      return;
    }

    await checkConnection({
      teamId,
      userEmail,
      userName,
      userColor: selectedColor
    });
  });

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
  document.getElementById('savePersonalBtn').addEventListener('click', async () => {
    await chrome.storage.local.set({
      syncMode: 'personal'
    });

    // –û—Ç–∫–ª—é—á–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    if (syncService) {
      syncService.disconnect();
    }

    alert('‚úÖ –õ–∏—á–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!');
  });

  // === –ö–ê–°–¢–û–ú–ù–´–ï –°–¢–ê–¢–£–°–´ ===

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
  const updatePreview = () => {
    const name = document.getElementById('newStatusName').value || '–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å';
    const emoji = document.getElementById('newStatusEmoji').value || '';
    const color = document.getElementById('newStatusColor').value;

    document.getElementById('previewName').textContent = name;
    document.getElementById('previewEmoji').textContent = emoji;
    document.getElementById('previewEmoji').style.display = emoji ? 'inline' : 'none';
    document.getElementById('previewDot').style.background = color;
  };

  document.getElementById('newStatusName')?.addEventListener('input', updatePreview);
  document.getElementById('newStatusEmoji')?.addEventListener('input', updatePreview);
  document.getElementById('newStatusColor')?.addEventListener('input', (e) => {
    document.getElementById('newStatusColorHex').value = e.target.value;
    updatePreview();
  });
  document.getElementById('newStatusColorHex')?.addEventListener('input', (e) => {
    const hex = e.target.value;
    if (/^#[0-9A-Fa-f]{6}$/.test(hex)) {
      document.getElementById('newStatusColor').value = hex;
      updatePreview();
    }
  });

  // –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ –∏–∑ –ø—Ä–µ—Å–µ—Ç–æ–≤
  document.querySelectorAll('.color-preset').forEach(btn => {
    btn.addEventListener('click', () => {
      const color = btn.dataset.color;
      document.getElementById('newStatusColor').value = color;
      document.getElementById('newStatusColorHex').value = color;
      updatePreview();
    });
  });

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
  document.getElementById('addStatusBtn')?.addEventListener('click', async () => {
    const name = document.getElementById('newStatusName').value.trim();
    const emoji = document.getElementById('newStatusEmoji').value.trim();
    const color = document.getElementById('newStatusColor').value;

    if (!name) {
      alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞!');
      return;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
    const id = 'custom_' + Date.now();

    const newStatus = {
      id,
      name,
      emoji,
      color,
      isDefault: false
    };

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã
    const result = await chrome.storage.local.get('customStatuses');
    const statuses = result.customStatuses || DEFAULT_STATUSES;

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
    statuses.push(newStatus);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º
    await chrome.storage.local.set({ customStatuses: statuses });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    await loadCustomStatuses();

    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
    document.getElementById('newStatusName').value = '';
    document.getElementById('newStatusEmoji').value = '';
    document.getElementById('newStatusColor').value = '#3b82f6';
    document.getElementById('newStatusColorHex').value = '#3b82f6';
    updatePreview();

    alert('‚úÖ –°—Ç–∞—Ç—É—Å –¥–æ–±–∞–≤–ª–µ–Ω! –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É Jira –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.');
  });

  // –°–±—Ä–æ—Å –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å—Ç–∞—Ç—É—Å–∞–º
  document.getElementById('resetDefaultsBtn')?.addEventListener('click', async () => {
    if (confirm('–í–µ—Ä–Ω—É—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã? –í—Å–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.')) {
      await chrome.storage.local.set({ customStatuses: DEFAULT_STATUSES });
      await loadCustomStatuses();
      alert('‚úÖ –°—Ç–∞—Ç—É—Å—ã —Å–±—Ä–æ—à–µ–Ω—ã –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º!');
    }
  });
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
async function loadCustomStatuses() {
  const result = await chrome.storage.local.get('customStatuses');
  const statuses = result.customStatuses || DEFAULT_STATUSES;

  // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
  if (!result.customStatuses) {
    await chrome.storage.local.set({ customStatuses: DEFAULT_STATUSES });
  }

  const statusesList = document.getElementById('statusesList');
  if (!statusesList) return;

  statusesList.innerHTML = statuses.map(status => `
    <div class="status-item ${status.isDefault ? 'default' : ''}">
      <div class="status-item-left">
        ${status.emoji ? `<span class="status-item-emoji">${status.emoji}</span>` : ''}
        <div class="status-item-dot" style="background: ${status.color};"></div>
        <span class="status-item-name">${status.name}</span>
        ${status.isDefault ? '<span class="status-item-badge">–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π</span>' : ''}
      </div>
      <div class="status-item-actions">
        ${!status.isDefault ? `<button class="delete" data-id="${status.id}">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>` : ''}
      </div>
    </div>
  `).join('');

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
  statusesList.querySelectorAll('.delete').forEach(btn => {
    btn.addEventListener('click', async () => {
      const id = btn.dataset.id;
      if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å—Ç–∞—Ç—É—Å?')) {
        const filtered = statuses.filter(s => s.id !== id);
        await chrome.storage.local.set({ customStatuses: filtered });
        await loadCustomStatuses();
        alert('‚úÖ –°—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω!');
      }
    });
  });
}
